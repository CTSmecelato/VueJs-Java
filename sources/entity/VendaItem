package entity;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Objects;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 *
 * @author caroline
 */

@Entity
@Table(name = "vendaItem")
public class VendaItem implements Serializable {

  private static final long serialVersionUID = 1L;
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "vendaitem_id", nullable = false)
  private Long id;

  @Column(name = "vendaitem_preco")
  private BigDecimal preco = BigDecimal.ZERO;

  @Column(name = "vendaitem_qntd")
  private BigDecimal quantidade = BigDecimal.ONE;

  @JoinColumn(name = "prod_id", referencedColumnName = "prod_id")
  @ManyToOne(cascade = CascadeType.MERGE)
  private Produto produto;

  @ManyToOne
  @JoinColumn(name = "venda_id", referencedColumnName = "venda_id")
  private Venda venda;

  public VendaItem() {
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public BigDecimal getPreco() {
    return preco;
  }

  public void setPreco(BigDecimal preco) {
    this.preco = preco;
  }

  public BigDecimal getQuantidade() {
    return quantidade;
  }

  public void setQuantidade(BigDecimal quantidade) {
    this.quantidade = quantidade;
  }

  public BigDecimal getSubtotal() {
    if (preco.equals(BigDecimal.ZERO) && produto != null) {
      preco = produto.getValor();
    }
    return preco.multiply(quantidade);
  }

  public Produto getProduto() {
    return produto;
  }

  public void setProduto(Produto produto) {
    this.produto = produto;
  }

  public Venda getVenda() {
    return venda;
  }

  public void setVenda(Venda venda) {
    this.venda = venda;
  }

  public Boolean getEmFalta() {
    if (produto.getEstoque().compareTo(quantidade) < 0) {
      return true;
    }
    return false;
  }

  public boolean equals(Object object) {
    if (this == object) return true;
    if (object == null || getClass() != object.getClass()) return false;
    if (!super.equals(object)) return false;
    VendaItem vendaItem = (VendaItem) object;
    return java.util.Objects.equals(preco, vendaItem.preco) &&
      java.util.Objects.equals(produto, vendaItem.produto) &&
      java.util.Objects.equals(venda, vendaItem.venda);
  }

  public int hashCode() {
    return Objects.hash(super.hashCode(), preco, produto, venda);
  }

  @Override
  public String toString() {
    return id.toString();
  }
}
